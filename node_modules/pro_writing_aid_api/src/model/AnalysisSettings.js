/**
 * ProWritingAid API V2
 * Official ProWritingAid API Version 2
 *
 * OpenAPI spec version: v2
 * Contact: hello@prowritingaid.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ProWritingAidApiV2) {
      root.ProWritingAidApiV2 = {};
    }
    root.ProWritingAidApiV2.AnalysisSettings = factory(root.ProWritingAidApiV2.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The AnalysisSettings model module.
   * @module model/AnalysisSettings
   * @version 2.0.0
   */

  /**
   * Constructs a new <code>AnalysisSettings</code>.
   * @alias module:model/AnalysisSettings
   * @class
   * @param shortestAverageSentenceLength {Number} 
   * @param longestAverageSentenceLength {Number} 
   * @param longestIndividualSentence {Number} 
   * @param highestPassiveIndex {Number} 
   * @param maxGlueIndex {Number} 
   * @param minSentenceVariety {Number} 
   * @param highestPronounPercentage {Number} 
   * @param lowestPronounPercentage {Number} 
   * @param highestAcademicPronounPercentage {Number} 
   * @param highestInitialPronounPercentage {Number} 
   * @param lowestInitialPronounPercentage {Number} 
   * @param lowestWeWeScore {Number} 
   * @param longestAverageParagraphLength {Number} 
   */
  var exports = function(shortestAverageSentenceLength, longestAverageSentenceLength, longestIndividualSentence, highestPassiveIndex, maxGlueIndex, minSentenceVariety, highestPronounPercentage, lowestPronounPercentage, highestAcademicPronounPercentage, highestInitialPronounPercentage, lowestInitialPronounPercentage, lowestWeWeScore, longestAverageParagraphLength) {
    var _this = this;

    _this['ShortestAverageSentenceLength'] = shortestAverageSentenceLength;
    _this['LongestAverageSentenceLength'] = longestAverageSentenceLength;
    _this['LongestIndividualSentence'] = longestIndividualSentence;
    _this['HighestPassiveIndex'] = highestPassiveIndex;
    _this['MaxGlueIndex'] = maxGlueIndex;
    _this['MinSentenceVariety'] = minSentenceVariety;
    _this['HighestPronounPercentage'] = highestPronounPercentage;
    _this['LowestPronounPercentage'] = lowestPronounPercentage;
    _this['HighestAcademicPronounPercentage'] = highestAcademicPronounPercentage;
    _this['HighestInitialPronounPercentage'] = highestInitialPronounPercentage;
    _this['LowestInitialPronounPercentage'] = lowestInitialPronounPercentage;
    _this['LowestWeWeScore'] = lowestWeWeScore;
    _this['LongestAverageParagraphLength'] = longestAverageParagraphLength;
  };

  /**
   * Constructs a <code>AnalysisSettings</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/AnalysisSettings} obj Optional instance to populate.
   * @return {module:model/AnalysisSettings} The populated <code>AnalysisSettings</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('ShortestAverageSentenceLength')) {
        obj['ShortestAverageSentenceLength'] = ApiClient.convertToType(data['ShortestAverageSentenceLength'], 'Number');
      }
      if (data.hasOwnProperty('LongestAverageSentenceLength')) {
        obj['LongestAverageSentenceLength'] = ApiClient.convertToType(data['LongestAverageSentenceLength'], 'Number');
      }
      if (data.hasOwnProperty('LongestIndividualSentence')) {
        obj['LongestIndividualSentence'] = ApiClient.convertToType(data['LongestIndividualSentence'], 'Number');
      }
      if (data.hasOwnProperty('HighestPassiveIndex')) {
        obj['HighestPassiveIndex'] = ApiClient.convertToType(data['HighestPassiveIndex'], 'Number');
      }
      if (data.hasOwnProperty('MaxGlueIndex')) {
        obj['MaxGlueIndex'] = ApiClient.convertToType(data['MaxGlueIndex'], 'Number');
      }
      if (data.hasOwnProperty('MinSentenceVariety')) {
        obj['MinSentenceVariety'] = ApiClient.convertToType(data['MinSentenceVariety'], 'Number');
      }
      if (data.hasOwnProperty('HighestPronounPercentage')) {
        obj['HighestPronounPercentage'] = ApiClient.convertToType(data['HighestPronounPercentage'], 'Number');
      }
      if (data.hasOwnProperty('LowestPronounPercentage')) {
        obj['LowestPronounPercentage'] = ApiClient.convertToType(data['LowestPronounPercentage'], 'Number');
      }
      if (data.hasOwnProperty('HighestAcademicPronounPercentage')) {
        obj['HighestAcademicPronounPercentage'] = ApiClient.convertToType(data['HighestAcademicPronounPercentage'], 'Number');
      }
      if (data.hasOwnProperty('HighestInitialPronounPercentage')) {
        obj['HighestInitialPronounPercentage'] = ApiClient.convertToType(data['HighestInitialPronounPercentage'], 'Number');
      }
      if (data.hasOwnProperty('LowestInitialPronounPercentage')) {
        obj['LowestInitialPronounPercentage'] = ApiClient.convertToType(data['LowestInitialPronounPercentage'], 'Number');
      }
      if (data.hasOwnProperty('LowestWeWeScore')) {
        obj['LowestWeWeScore'] = ApiClient.convertToType(data['LowestWeWeScore'], 'Number');
      }
      if (data.hasOwnProperty('LongestAverageParagraphLength')) {
        obj['LongestAverageParagraphLength'] = ApiClient.convertToType(data['LongestAverageParagraphLength'], 'Number');
      }
    }
    return obj;
  }

  /**
   * @member {Number} ShortestAverageSentenceLength
   * @default 11
   */
  exports.prototype['ShortestAverageSentenceLength'] = 11;
  /**
   * @member {Number} LongestAverageSentenceLength
   * @default 18
   */
  exports.prototype['LongestAverageSentenceLength'] = 18;
  /**
   * @member {Number} LongestIndividualSentence
   * @default 30
   */
  exports.prototype['LongestIndividualSentence'] = 30;
  /**
   * @member {Number} HighestPassiveIndex
   * @default 25
   */
  exports.prototype['HighestPassiveIndex'] = 25;
  /**
   * @member {Number} MaxGlueIndex
   * @default 40
   */
  exports.prototype['MaxGlueIndex'] = 40;
  /**
   * @member {Number} MinSentenceVariety
   * @default 3
   */
  exports.prototype['MinSentenceVariety'] = 3;
  /**
   * @member {Number} HighestPronounPercentage
   * @default 15.0
   */
  exports.prototype['HighestPronounPercentage'] = 15.0;
  /**
   * @member {Number} LowestPronounPercentage
   * @default 4.0
   */
  exports.prototype['LowestPronounPercentage'] = 4.0;
  /**
   * @member {Number} HighestAcademicPronounPercentage
   * @default 2.0
   */
  exports.prototype['HighestAcademicPronounPercentage'] = 2.0;
  /**
   * @member {Number} HighestInitialPronounPercentage
   * @default 30.0
   */
  exports.prototype['HighestInitialPronounPercentage'] = 30.0;
  /**
   * @member {Number} LowestInitialPronounPercentage
   * @default 0.0
   */
  exports.prototype['LowestInitialPronounPercentage'] = 0.0;
  /**
   * @member {Number} LowestWeWeScore
   * @default 0.6
   */
  exports.prototype['LowestWeWeScore'] = 0.6;
  /**
   * @member {Number} LongestAverageParagraphLength
   * @default 6.0
   */
  exports.prototype['LongestAverageParagraphLength'] = 6.0;



  return exports;
}));


