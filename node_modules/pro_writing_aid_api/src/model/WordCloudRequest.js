/**
 * ProWritingAid API V2
 * Official ProWritingAid API Version 2
 *
 * OpenAPI spec version: v2
 * Contact: hello@prowritingaid.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'));
  } else {
    // Browser globals (root is window)
    if (!root.ProWritingAidApiV2) {
      root.ProWritingAidApiV2 = {};
    }
    root.ProWritingAidApiV2.WordCloudRequest = factory(root.ProWritingAidApiV2.ApiClient);
  }
}(this, function(ApiClient) {
  'use strict';




  /**
   * The WordCloudRequest model module.
   * @module model/WordCloudRequest
   * @version 2.0.0
   */

  /**
   * Constructs a new <code>WordCloudRequest</code>.
   * @alias module:model/WordCloudRequest
   * @class
   * @param text {String} The text to be turned into a Word Cloud
   * @param orientation {module:model/WordCloudRequest.OrientationEnum} The orientation of the text
   * @param caseMethod {module:model/WordCloudRequest.CaseMethodEnum} The method to be used for casing
   * @param paletteName {String} The name of the palette
   * @param maximumWordCount {Number} the maximum number of words to be created
   * @param removeCommonWords {Boolean} Should Common words be removed from the cloud
   * @param fontName {String} The name of the font to use
   * @param width {Number} The width of the image to produce
   * @param height {Number} The height of the image to produce
   * @param onlySentimentWords {Boolean} Only use the sentiment words from the text
   * @param style {module:model/WordCloudRequest.StyleEnum} Document's writing style
   * @param language {module:model/WordCloudRequest.LanguageEnum} Document's language. Set correct UK/US language to get region-specific suggestions
   */
  var exports = function(text, orientation, caseMethod, paletteName, maximumWordCount, removeCommonWords, fontName, width, height, onlySentimentWords, style, language) {
    var _this = this;

    _this['Text'] = text;
    _this['Orientation'] = orientation;
    _this['CaseMethod'] = caseMethod;
    _this['PaletteName'] = paletteName;
    _this['MaximumWordCount'] = maximumWordCount;
    _this['RemoveCommonWords'] = removeCommonWords;
    _this['FontName'] = fontName;
    _this['Width'] = width;
    _this['Height'] = height;
    _this['OnlySentimentWords'] = onlySentimentWords;
    _this['Style'] = style;
    _this['Language'] = language;
  };

  /**
   * Constructs a <code>WordCloudRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/WordCloudRequest} obj Optional instance to populate.
   * @return {module:model/WordCloudRequest} The populated <code>WordCloudRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('Text')) {
        obj['Text'] = ApiClient.convertToType(data['Text'], 'String');
      }
      if (data.hasOwnProperty('Orientation')) {
        obj['Orientation'] = ApiClient.convertToType(data['Orientation'], 'String');
      }
      if (data.hasOwnProperty('CaseMethod')) {
        obj['CaseMethod'] = ApiClient.convertToType(data['CaseMethod'], 'String');
      }
      if (data.hasOwnProperty('PaletteName')) {
        obj['PaletteName'] = ApiClient.convertToType(data['PaletteName'], 'String');
      }
      if (data.hasOwnProperty('MaximumWordCount')) {
        obj['MaximumWordCount'] = ApiClient.convertToType(data['MaximumWordCount'], 'Number');
      }
      if (data.hasOwnProperty('RemoveCommonWords')) {
        obj['RemoveCommonWords'] = ApiClient.convertToType(data['RemoveCommonWords'], 'Boolean');
      }
      if (data.hasOwnProperty('FontName')) {
        obj['FontName'] = ApiClient.convertToType(data['FontName'], 'String');
      }
      if (data.hasOwnProperty('Width')) {
        obj['Width'] = ApiClient.convertToType(data['Width'], 'Number');
      }
      if (data.hasOwnProperty('Height')) {
        obj['Height'] = ApiClient.convertToType(data['Height'], 'Number');
      }
      if (data.hasOwnProperty('OnlySentimentWords')) {
        obj['OnlySentimentWords'] = ApiClient.convertToType(data['OnlySentimentWords'], 'Boolean');
      }
      if (data.hasOwnProperty('Style')) {
        obj['Style'] = ApiClient.convertToType(data['Style'], 'String');
      }
      if (data.hasOwnProperty('Language')) {
        obj['Language'] = ApiClient.convertToType(data['Language'], 'String');
      }
    }
    return obj;
  }

  /**
   * The text to be turned into a Word Cloud
   * @member {String} Text
   */
  exports.prototype['Text'] = undefined;
  /**
   * The orientation of the text
   * @member {module:model/WordCloudRequest.OrientationEnum} Orientation
   * @default 'EveryWhichWay'
   */
  exports.prototype['Orientation'] = 'EveryWhichWay';
  /**
   * The method to be used for casing
   * @member {module:model/WordCloudRequest.CaseMethodEnum} CaseMethod
   * @default 'IntelligentCase'
   */
  exports.prototype['CaseMethod'] = 'IntelligentCase';
  /**
   * The name of the palette
   * @member {String} PaletteName
   * @default 'ProWritingAid'
   */
  exports.prototype['PaletteName'] = 'ProWritingAid';
  /**
   * the maximum number of words to be created
   * @member {Number} MaximumWordCount
   * @default 100
   */
  exports.prototype['MaximumWordCount'] = 100;
  /**
   * Should Common words be removed from the cloud
   * @member {Boolean} RemoveCommonWords
   * @default true
   */
  exports.prototype['RemoveCommonWords'] = true;
  /**
   * The name of the font to use
   * @member {String} FontName
   * @default 'Arial'
   */
  exports.prototype['FontName'] = 'Arial';
  /**
   * The width of the image to produce
   * @member {Number} Width
   * @default 200
   */
  exports.prototype['Width'] = 200;
  /**
   * The height of the image to produce
   * @member {Number} Height
   * @default 200
   */
  exports.prototype['Height'] = 200;
  /**
   * Only use the sentiment words from the text
   * @member {Boolean} OnlySentimentWords
   * @default false
   */
  exports.prototype['OnlySentimentWords'] = false;
  /**
   * Document's writing style
   * @member {module:model/WordCloudRequest.StyleEnum} Style
   * @default 'General'
   */
  exports.prototype['Style'] = 'General';
  /**
   * Document's language. Set correct UK/US language to get region-specific suggestions
   * @member {module:model/WordCloudRequest.LanguageEnum} Language
   * @default 'en'
   */
  exports.prototype['Language'] = 'en';


  /**
   * Allowed values for the <code>Orientation</code> property.
   * @enum {String}
   * @readonly
   */
  exports.OrientationEnum = {
    /**
     * value: "Horizontal"
     * @const
     */
    "Horizontal": "Horizontal",
    /**
     * value: "MostlyHorizontal"
     * @const
     */
    "MostlyHorizontal": "MostlyHorizontal",
    /**
     * value: "Vertical"
     * @const
     */
    "Vertical": "Vertical",
    /**
     * value: "MostlyVertical"
     * @const
     */
    "MostlyVertical": "MostlyVertical",
    /**
     * value: "HalfAndHalf"
     * @const
     */
    "HalfAndHalf": "HalfAndHalf",
    /**
     * value: "EveryWhichWay"
     * @const
     */
    "EveryWhichWay": "EveryWhichWay"  };

  /**
   * Allowed values for the <code>CaseMethod</code> property.
   * @enum {String}
   * @readonly
   */
  exports.CaseMethodEnum = {
    /**
     * value: "PreserveCase"
     * @const
     */
    "PreserveCase": "PreserveCase",
    /**
     * value: "Lowercase"
     * @const
     */
    "Lowercase": "Lowercase",
    /**
     * value: "Uppercase"
     * @const
     */
    "Uppercase": "Uppercase",
    /**
     * value: "IntelligentCase"
     * @const
     */
    "IntelligentCase": "IntelligentCase"  };

  /**
   * Allowed values for the <code>Style</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StyleEnum = {
    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",
    /**
     * value: "General"
     * @const
     */
    "General": "General",
    /**
     * value: "Academic"
     * @const
     */
    "Academic": "Academic",
    /**
     * value: "Business"
     * @const
     */
    "Business": "Business",
    /**
     * value: "Technical"
     * @const
     */
    "Technical": "Technical",
    /**
     * value: "Creative"
     * @const
     */
    "Creative": "Creative",
    /**
     * value: "Casual"
     * @const
     */
    "Casual": "Casual",
    /**
     * value: "Web"
     * @const
     */
    "Web": "Web"  };

  /**
   * Allowed values for the <code>Language</code> property.
   * @enum {String}
   * @readonly
   */
  exports.LanguageEnum = {
    /**
     * value: "en_US"
     * @const
     */
    "en_US": "en_US",
    /**
     * value: "en_UK"
     * @const
     */
    "en_UK": "en_UK",
    /**
     * value: "en"
     * @const
     */
    "en": "en",
    /**
     * value: "es"
     * @const
     */
    "es": "es"  };


  return exports;
}));


