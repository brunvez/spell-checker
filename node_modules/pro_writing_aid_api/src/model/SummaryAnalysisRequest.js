/**
 * ProWritingAid API V2
 * Official ProWritingAid API Version 2
 *
 * OpenAPI spec version: v2
 * Contact: hello@prowritingaid.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AnalysisSettings'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./AnalysisSettings'));
  } else {
    // Browser globals (root is window)
    if (!root.ProWritingAidApiV2) {
      root.ProWritingAidApiV2 = {};
    }
    root.ProWritingAidApiV2.SummaryAnalysisRequest = factory(root.ProWritingAidApiV2.ApiClient, root.ProWritingAidApiV2.AnalysisSettings);
  }
}(this, function(ApiClient, AnalysisSettings) {
  'use strict';




  /**
   * The SummaryAnalysisRequest model module.
   * @module model/SummaryAnalysisRequest
   * @version 2.0.0
   */

  /**
   * Constructs a new <code>SummaryAnalysisRequest</code>.
   * @alias module:model/SummaryAnalysisRequest
   * @class
   * @param text {String} Text to be analyzed
   * @param settings {module:model/AnalysisSettings} Analysis settings
   * @param style {module:model/SummaryAnalysisRequest.StyleEnum} Document's writing style
   * @param language {module:model/SummaryAnalysisRequest.LanguageEnum} Document's language. Set correct UK/US language to get region-specific suggestions
   */
  var exports = function(text, settings, style, language) {
    var _this = this;

    _this['Text'] = text;
    _this['Settings'] = settings;
    _this['Style'] = style;
    _this['Language'] = language;
  };

  /**
   * Constructs a <code>SummaryAnalysisRequest</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/SummaryAnalysisRequest} obj Optional instance to populate.
   * @return {module:model/SummaryAnalysisRequest} The populated <code>SummaryAnalysisRequest</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('Text')) {
        obj['Text'] = ApiClient.convertToType(data['Text'], 'String');
      }
      if (data.hasOwnProperty('Settings')) {
        obj['Settings'] = AnalysisSettings.constructFromObject(data['Settings']);
      }
      if (data.hasOwnProperty('Style')) {
        obj['Style'] = ApiClient.convertToType(data['Style'], 'String');
      }
      if (data.hasOwnProperty('Language')) {
        obj['Language'] = ApiClient.convertToType(data['Language'], 'String');
      }
    }
    return obj;
  }

  /**
   * Text to be analyzed
   * @member {String} Text
   */
  exports.prototype['Text'] = undefined;
  /**
   * Analysis settings
   * @member {module:model/AnalysisSettings} Settings
   */
  exports.prototype['Settings'] = undefined;
  /**
   * Document's writing style
   * @member {module:model/SummaryAnalysisRequest.StyleEnum} Style
   * @default 'General'
   */
  exports.prototype['Style'] = 'General';
  /**
   * Document's language. Set correct UK/US language to get region-specific suggestions
   * @member {module:model/SummaryAnalysisRequest.LanguageEnum} Language
   * @default 'en'
   */
  exports.prototype['Language'] = 'en';


  /**
   * Allowed values for the <code>Style</code> property.
   * @enum {String}
   * @readonly
   */
  exports.StyleEnum = {
    /**
     * value: "NotSet"
     * @const
     */
    "NotSet": "NotSet",
    /**
     * value: "General"
     * @const
     */
    "General": "General",
    /**
     * value: "Academic"
     * @const
     */
    "Academic": "Academic",
    /**
     * value: "Business"
     * @const
     */
    "Business": "Business",
    /**
     * value: "Technical"
     * @const
     */
    "Technical": "Technical",
    /**
     * value: "Creative"
     * @const
     */
    "Creative": "Creative",
    /**
     * value: "Casual"
     * @const
     */
    "Casual": "Casual",
    /**
     * value: "Web"
     * @const
     */
    "Web": "Web"  };

  /**
   * Allowed values for the <code>Language</code> property.
   * @enum {String}
   * @readonly
   */
  exports.LanguageEnum = {
    /**
     * value: "en_US"
     * @const
     */
    "en_US": "en_US",
    /**
     * value: "en_UK"
     * @const
     */
    "en_UK": "en_UK",
    /**
     * value: "en"
     * @const
     */
    "en": "en",
    /**
     * value: "es"
     * @const
     */
    "es": "es"  };


  return exports;
}));


