/**
 * ProWritingAid API
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AsyncResponseHtmlAnalysisResponse'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AsyncResponseHtmlAnalysisResponse'));
  } else {
    // Browser globals (root is window)
    if (!root.ProWritingAidApi) {
      root.ProWritingAidApi = {};
    }
    root.ProWritingAidApi.AsyncHtmlResultApi = factory(root.ProWritingAidApi.ApiClient, root.ProWritingAidApi.AsyncResponseHtmlAnalysisResponse);
  }
}(this, function(ApiClient, AsyncResponseHtmlAnalysisResponse) {
  'use strict';

  /**
   * AsyncHtmlResult service.
   * @module api/AsyncHtmlResultApi
   * @version v1
   */

  /**
   * Constructs a new AsyncHtmlResultApi. 
   * @alias module:api/AsyncHtmlResultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * @param {String} taskId
     * @param {String} licenseCode API key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HtmlAnalysisResponse}
     */
    this.asyncHtmlResultGetResult = function(taskId, licenseCode) {
      var postBody = null;

      // verify the required parameter 'taskId' is set
      if (taskId == undefined || taskId == null) {
        throw "Missing the required parameter 'taskId' when calling asyncHtmlResultGetResult";
      }


      var pathParams = {
        'taskId': taskId
      };
      var queryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json', 'application/xml', 'text/xml'];
      var returnType = AsyncResponseHtmlAnalysisResponse;

      return this.apiClient.callApi(
        '/api/async/result/html/{taskId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, licenseCode
      );
    }

    /**
     * @param {String} taskId
     * @param {String} licenseCode API key
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/HtmlAnalysisResponse}
     */
    this.get = function(taskId, licenseCode){
      return this.asyncHtmlResultGetResult(taskId,licenseCode);
    }
  };

  return exports;
}));
