/**
 * ProWritingAid API V2
 * Official ProWritingAid API Version 2
 *
 * OpenAPI spec version: v2
 * Contact: hello@prowritingaid.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AsyncResponseWordCloudResponse', 'model/WordCloudRequest'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AsyncResponseWordCloudResponse'), require('../model/WordCloudRequest'));
  } else {
    // Browser globals (root is window)
    if (!root.ProWritingAidApiV2) {
      root.ProWritingAidApiV2 = {};
    }
    root.ProWritingAidApiV2.WordCloudApi = factory(root.ProWritingAidApiV2.ApiClient, root.ProWritingAidApiV2.AsyncResponseWordCloudResponse, root.ProWritingAidApiV2.WordCloudRequest);
  }
}(this, function(ApiClient, AsyncResponseWordCloudResponse, WordCloudRequest) {
  'use strict';

  /**
   * WordCloud service.
   * @module api/WordCloudApi
   * @version 2.0.0
   */

  /**
   * Constructs a new WordCloudApi. 
   * @alias module:api/WordCloudApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;



    /**
     * @param {String} taskId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AsyncResponseWordCloudResponse} and HTTP response
     */
    this.getWithHttpInfo = function(taskId) {
      var postBody = null;

      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling get");
      }


      var pathParams = {
        'taskId': taskId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json', 'text/json'];
      var returnType = AsyncResponseWordCloudResponse;

      return this.apiClient.callApi(
        '/api/async/wordcloud/result/{taskId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {String} taskId 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AsyncResponseWordCloudResponse}
     */
    this.get = function(taskId) {
      return this.getWithHttpInfo(taskId)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }


    /**
     * @param {module:model/WordCloudRequest} requestp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with an object containing data of type {@link module:model/AsyncResponseWordCloudResponse} and HTTP response
     */
    this.postWithHttpInfo = function(requestp) {
      var postBody = requestp;

      // verify the required parameter 'requestp' is set
      if (requestp === undefined || requestp === null) {
        throw new Error("Missing the required parameter 'requestp' when calling post");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json'];
      var returnType = AsyncResponseWordCloudResponse;

      return this.apiClient.callApi(
        '/api/async/wordcloud', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType
      );
    }

    /**
     * @param {module:model/WordCloudRequest} requestp 
     * @return {Promise} a {@link https://www.promisejs.org/|Promise}, with data of type {@link module:model/AsyncResponseWordCloudResponse}
     */
    this.post = function(requestp) {
      return this.postWithHttpInfo(requestp)
        .then(function(response_and_data) {
          return response_and_data.data;
        });
    }
  };

  return exports;
}));
